'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRenderedElement = exports.getNewContainer = exports.getMainContainer = undefined;

var _reactDom = require('react-dom');

var _constants = require('./constants');

/**
 * @function getMainContainer
 *
 * @description
 * get the main container that future containers will be rendered into
 *
 * @param {Object} doc document to render into
 * @returns {HTMLElement} the main container that all future containers will render into
 */
// external dependencies
var getMainContainer = exports.getMainContainer = function getMainContainer(doc) {
  var container = doc.createElement('div');

  container.id = _constants.RENDER_CONTAINER_ID;

  container.style.left = '-10000px';
  container.style.position = 'absolute';
  container.style.top = '-10000px';
  container.style.visibility = 'hidden';

  return container;
};

/**
 * @function getNewContainer
 *
 * @description
 * get a new container that has the necessary styles for rendering
 *
 * @param {Object} doc document to create element with
 * @param {string} type the type of element to use for the container
 * @param {HTMLElement} passedContainer the passed container to used, instead of creating one
 * @param {number|string} width the width to assign to the container
 * @returns {HTMLElement} the new container element
 */


// constants
var getNewContainer = exports.getNewContainer = function getNewContainer(doc, type, passedContainer, width) {
  if (passedContainer) {
    return passedContainer;
  }

  var container = doc.createElement(type);

  container.style.width = typeof width === 'number' ? width + 'px' : width;

  return container;
};

/**
 * @function getRenderedElement
 *
 * @description
 * get the element rendered into the container
 *
 * @param {HTMLElement} container the container to render into
 * @param {ReactElement} element the element to render into the container
 * @returns {HTMLElement} the ReactElement rendered as a DOM element
 */
var getRenderedElement = exports.getRenderedElement = function getRenderedElement(container, element) {
  var doneRendering = false,
      renderResult = void 0;

  (0, _reactDom.render)(element, container, function () {
    renderResult = container.firstChild;

    doneRendering = true;
  });

  /* eslint-disable no-empty */
  while (!doneRendering) {}
  /* eslint-enable */

  return (0, _reactDom.findDOMNode)(renderResult);
};